// generated with @7nohe/openapi-react-query-codegen@1.1.0 
import * as Common from "./common";
import { useQuery, useSuspenseQuery, useMutation, UseQueryResult, UseQueryOptions, UseMutationOptions, UseMutationResult } from "@tanstack/react-query";
import { DormitoryService, InstituteService, ReviewService, UniversityService, UniversityNewsService, UserService, DormitoryData, InstituteData, ReviewData, UniversityData, UniversityNewsData, UserData } from "../requests";
import { Dormitory, Institute, Review, University, UniversityNews, UserComment, User, ErrorResponse } from "../requests/models";
export const useDormitoryServiceGetDormitoreSuspense = <TData = Common.DormitoryServiceGetDormitoreDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: [Common.useDormitoryServiceGetDormitoreKey, ...(queryKey ?? [])], queryFn: () => DormitoryService.getDormitore() as TData, ...options });
export const useDormitoryServiceGetDormitoreByIdSuspense = <TData = Common.DormitoryServiceGetDormitoreByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
    id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: [Common.useDormitoryServiceGetDormitoreByIdKey, ...(queryKey ?? [{ id }])], queryFn: () => DormitoryService.getDormitoreById({ id }) as TData, ...options });
export const useInstituteServiceGetInstituteSuspense = <TData = Common.InstituteServiceGetInstituteDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: [Common.useInstituteServiceGetInstituteKey, ...(queryKey ?? [])], queryFn: () => InstituteService.getInstitute() as TData, ...options });
export const useReviewServiceGetReviewSuspense = <TData = Common.ReviewServiceGetReviewDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: [Common.useReviewServiceGetReviewKey, ...(queryKey ?? [])], queryFn: () => ReviewService.getReview() as TData, ...options });
export const useReviewServiceGetReviewByIdSuspense = <TData = Common.ReviewServiceGetReviewByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
    id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: [Common.useReviewServiceGetReviewByIdKey, ...(queryKey ?? [{ id }])], queryFn: () => ReviewService.getReviewById({ id }) as TData, ...options });
export const useUniversityServiceGetUniversityByIdSuspense = <TData = Common.UniversityServiceGetUniversityByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
    id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: [Common.useUniversityServiceGetUniversityByIdKey, ...(queryKey ?? [{ id }])], queryFn: () => UniversityService.getUniversityById({ id }) as TData, ...options });
export const useUniversityServiceGetUniversitySuspense = <TData = Common.UniversityServiceGetUniversityDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: [Common.useUniversityServiceGetUniversityKey, ...(queryKey ?? [])], queryFn: () => UniversityService.getUniversity() as TData, ...options });
export const useUniversityNewsServiceGetNewsByIdSuspense = <TData = Common.UniversityNewsServiceGetNewsByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
    id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: [Common.useUniversityNewsServiceGetNewsByIdKey, ...(queryKey ?? [{ id }])], queryFn: () => UniversityNewsService.getNewsById({ id }) as TData, ...options });
export const useUniversityNewsServiceGetNewsSuspense = <TData = Common.UniversityNewsServiceGetNewsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: [Common.useUniversityNewsServiceGetNewsKey, ...(queryKey ?? [])], queryFn: () => UniversityNewsService.getNews() as TData, ...options });
export const useUserServiceGetUserByIdSuspense = <TData = Common.UserServiceGetUserByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
    id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: [Common.useUserServiceGetUserByIdKey, ...(queryKey ?? [{ id }])], queryFn: () => UserService.getUserById({ id }) as TData, ...options });
export const useUserServiceGetUsersSuspense = <TData = Common.UserServiceGetUsersDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: [Common.useUserServiceGetUsersKey, ...(queryKey ?? [])], queryFn: () => UserService.getUsers() as TData, ...options });
